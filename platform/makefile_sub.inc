# This file is included from */sub/*/Makefile
topdir=../../../../

include $(topdir)makefile_cam.inc

# Change CPU architecture to ARM V4 if building with GCC EABI
# Otherwise incorrect wrapper calls to firmware functions are generated
ifdef OPT_USE_GCC_EABI
    ifndef THUMB_FW
        ARCHFLAGS+=-march=armv4
    endif
endif

all: libplatformsub.a main.bin

FWVERADDR=$(shell grep "Firmware Ver" stubs_entry.S | \
    awk -F'["|@]' '{printf "%s", substr($$5,2);}')

#OBJS= should be defined in */sub/*/Makefile for camera files
#add platform dependent 'core' files (build as THUMB)
OBJS+=main.thm.o gui_draw.thm.o memmgmt.thm.o \
     gui.thm.o kbd_process.thm.o kbd_common.thm.o conf.thm.o gui_osd.thm.o raw.thm.o usb_sync.thm.o\
     shooting.thm.o camera_info.thm.o remotecap.thm.o lib_thumb.thm.o lang_str.thm.o

gui_draw.thm.o: $(core)/gui_draw.c $(lfont)/font_8x16_uni_packed.h
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -mthumb -c -o $@ $<

lang_str.thm.o: $(llang)/lang_str.c $(llang)/lang_str.h
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -mthumb -c -o $@ $<

# Build rules for source files containing assembly code - don't include 'march=armv4'
# NOTE: these files should not contain C functions that could be called from Thumb code
capt_seq.o: capt_seq.c $(platform)/generic/capt_seq.c
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -c -o $@ $<

filewrite.o: filewrite.c $(platform)/generic/filewrite.c
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -c -o $@ $<

movie_rec.o: movie_rec.c
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -c -o $@ $<

boot.o: boot.c
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -c -o $@ $<

libplatformsub.a: $(OBJS) bin_compat.h

.FORCE: ;
entry.o: $(core)/entry.S .FORCE
	@echo $< \-\> $@
	$(CC) $(CFLAGS) -nostdinc -c -o $@ $<

main.bin: main.elf

LDOPTS=-nostdlib -Wl,--allow-shlib-undefined -Wl,-T,$(tools)/link-boot.ld -Wl,-N,-Ttext,$(MEMISOSTART)

main.elf: entry.o $(cam)/libplatform.a \
          $(camfw)/libplatformsub.a \
          $(lfont)/$Olibfont.a $(lmath)/$Olibmath.a \
          $(llang)/$Oliblang.a $(larmutil)/$Olibarmutil.a \
          $(lcore)/$Olibcore.a
	@echo \-\> $@
	$(CC) $(CFLAGS) -o $@ -Wl,--start-group $^ -lgcc -Wl,--end-group $(LDOPTS)
	( $(NM) $@ | grep ' U ' > $@.syms ) && echo "error: unresolved symbols in $@ (see $@.syms)" && exit 1 || exit 0

	$(SIZE) $@ | tee size.txt
	@printf " %s-%s (%s, #%s): MEMISOSIZE used: 0x%s\n" \
      $(TARGET_CAM) $(TARGET_FW) $(PLATFORMOS) $(TARGET_PID) \
      `tail -c16 size.txt | head -c6` >> $(bin)/caminfo.txt
ifdef OPT_CHDK_IN_ARAM
	$(tools)/checkbinsize.sh size.txt $(ARAM_HEAP_SIZE)
endif
	rm -f size.txt

clean:
	rm -f *.o *.a *.err *.bin *.elf *.syms *.dump bin_compat.h

distclean: clean
	rm -f stubs_entry.S stubs_auto.S
	rm -rf .dep

run-code-gen:
	@echo $^ \-\> $@
	if [ -s $(TARGET_PRIMARY) ] && [ -s code_gen.txt ] ; then \
	  $(tools)/code_gen $(ROMBASEADDR) code_gen.txt $(TARGET_PRIMARY) $(ALT_ROMBASEADDR) ; \
	else \
	  echo CAUTION! code_gen cannot be run due to target firmware binary or code_gen.txt not found! ; \
	fi ; \

stubs_auto.S: $(STUBS_AUTO_DEPS)
	@echo $^ \-\> $@
	cat $^ | \
	    grep -E '^[[:space:][:alpha:](]*["][[:space:]]*[Bb][a-wA-W]*[\.]*[a-wA-W]*[[:space:]]+sub_[0-9A-Fa-f]+[[:space:]]*[\\/"]' | \
	    sed 's/.*[Bb][[:alpha:]\.]*[[:space:]][[:space:]]*sub_\([0-9A-Fa-f]*\).*/\1/' | \
	    $(SORT) | uniq | \
	    awk 'BEGIN {print "/* THIS FILE IS GENERATED */\n/* DO NOT EDIT THIS FILE! */\n\n#include \"stubs_asm.h\"\n"} \
	        {printf("STUB(%s)\n",$$1)}' > stubs_auto.S
	cat $^ | \
	    grep -E '^[[:space:][:alpha:](]*["][[:space:]]*[Bb][Ll][Xx][[:alpha:]]*[[:space:]]+sub_[0-9A-Fa-f]+[[:space:]]*[\\/"]' | \
	    sed 's/.*[Bb][Ll][Xx][[:alpha:]]*[[:space:]][[:space:]]*sub_\([0-9A-Fa-f]*\).*/\1/' | \
	    $(SORT) | uniq | \
	    awk '{if(NF>0){printf("STUB2(%s)\n",$$1)}}' >> stubs_auto.S

ifdef THUMB_FW
    FINSIG_EXE=$(tools)/finsig_thumb2$(EXE)
# capstone tools required to build thumb2 stubs, allow batch rebuilds without
    ifneq ($(OPT_CAPSTONE_TOOLS),1)
        override FORCE_GEN_STUBS=
        override OPT_GEN_STUBS=
    endif
else
    FINSIG_EXE=$(tools)/finsig_$(PLATFORMOS)$(EXE)
endif

# Force stubs build even if turned off in localbuildconf.inc (used for batch-rebuild-stubs target)
ifdef FORCE_GEN_STUBS
    override OPT_GEN_STUBS=1
endif

stubs_entry.S: $(TARGET_PRIMARY) $(tools)/signatures_$(PLATFORMOS).h $(FINSIG_EXE) stubs_entry_2.S stubs_min.S
	@echo \-\> $@
ifdef OPT_GEN_STUBS
	rm -f stubs_entry.S.err
	if [ -s $(TARGET_PRIMARY) ] ; then \
	  $(FINSIG_EXE) $(TARGET_PRIMARY) $(ROMBASEADDR) stubs_entry.S $(ALT_ROMBASEADDR) ; \
	else \
	  echo CAUTION! \'stubs_entry.S\' is not updated due to target firmware binary not found! ; \
	  touch stubs_entry.S ; \
	fi ; \
	if [ "X`grep 'ERROR' stubs_entry.S`" != "X" ] ; then \
	  grep "ERROR" stubs_entry.S | $(ESED) "s/\/\/ ERROR: ([^ ]+) is not found.*/\1/" | $(SORT) | uniq > stubs_nf.names ; \
	  grep -E "NH?STUB|IGNORE" stubs_entry_2.S | $(ESED) "s/ *(NH?STUB|IGNORE)\( *([^ ,)]+).*/\2/" | $(SORT) | uniq > stubs_mn.names ; \
	  comm -23 stubs_nf.names stubs_mn.names > stubs_not_found_names.err ; \
	  rm -f stubs_nf.names stubs_mn.names ; \
	  if [ -s stubs_not_found_names.err ] ; then \
	    echo ERROR! There are unresolved addresses in \'stubs_entry.S\' \($(PLATFORM)-$(PLATFORMSUB)\) for the following names: ; \
	    cat stubs_not_found_names.err ; \
	    echo Please, add them into \'stubs_entry_2.S\' manually! ; \
	    mv stubs_entry.S stubs_entry.S.err ; \
	    exit 1 ; \
	  fi ; \
	  rm -f stubs_not_found_names.err ; \
	fi
else
	echo CAUTION! \'stubs_entry.S\' updating is turned off! ; \
	touch stubs_entry.S
endif

bin_compat.h: stubs_entry.S .FORCE
# GM version prefix is hardcoded!
	@echo creating bin_compat.h
	rm -f bin_compat.h
	if [ -s bin_comp_fix.h ] ; then \
	 echo "#include \"bin_comp_fix.h\"" >> bin_compat.h ; \
	else \
	 echo "/* THIS FILE IS GENERATED, DO NOT EDIT! */" > bin_compat.h ; \
	 grep "Firmware Ver" stubs_entry.S | \
	 awk -F'["|@]' '{printf "\nver_sig_t ver_sigs[]={\n"; \
	 str=toupper("$(PLATFORMSUB)"); len=length(str); str1=substr(str,1,len-3) "." substr(str,len-2); \
	 printf "    {(const char *)%s, \"GM%s\"},\n", substr($$5,2), str1;}' >> bin_compat.h ; \
	 awk -v ptt="^$(PLATFORM),.+,$(PLATFORMSUB)" -F',' '$$0 ~ ptt { str=toupper($$2); \
	 len=length(str); str1=substr(str,1,len-3) "." substr(str,len-2); \
	 printf "    {(const char *)%s, \"GM%s\"},\n", "$(FWVERADDR)", str1;}' $(topdir)camera_list.csv \
	 >> bin_compat.h ; \
	 echo "};" >> bin_compat.h ; \
	 echo "pid_sig_t pid_sigs[]={" >> bin_compat.h ; \
	 grep -E -h -s "PLATFORMID.+@" ../../makefile.inc makefile.inc stubs_entry.S | \
	 $(ESED) 's/(PLATFORMID.+@ *)([0-9xXa-fA-F]+)(.*)/PLATFORMID @ \2/' | \
	 awk -F'@' '{printf "    {(short *)%s, PLATFORMID},\n", substr($$2,2); exit;}' >> bin_compat.h ; \
	 echo "};" >> bin_compat.h ; \
	fi


$(TARGET_PRIMARY):
	touch $(TARGET_PRIMARY)

include $(topdir)bottom.inc


# Define empty recipes for source files (including the makefiles)
# to prevent make from trying implicit rules to create them. Speeds up build process
../../../makefile_sub.inc: ;
$(tools)/signatures_$(PLATFORMOS).h: ;
$(FINSIG_EXE): ;
$(platform)/generic/*.c: ;
$(core)/*.c: ;
$(core)/*.S: ;
stubs_min.S: ;
stubs_entry_2.S: ;
